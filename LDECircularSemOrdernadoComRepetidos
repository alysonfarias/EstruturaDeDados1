package XXXXX;

/*  ! Concatenar Lista Duplamente Circular Encadeada - > { Linha 124 }
1 – Considere uma lista duplamente encadeada circular genérica. Implemente um método
concatenar, na classe LDEC (lista duplamente encadeada circular), que deverá fazer a
concatenação de duas listas lineares duplamente encadeadas circulares, de forma que L1 = L1 +
L2, ou seja, ao final do método, todos os nós ficarão pertencendo a lista L1 e a lista L2 ficará vazia.
A ordem dos nós na lista deverá permanecer a mesma.
Exemplo de chamada: L1.concatenar (L2);


   ! Dividir Lista Duplamente Circular Encadeada pela metade - > { Linha 136 }
Implemente uma função dividir, na classe LDEC (lista duplamente encadeada circular), que
deverá dividir uma lista em duas outras. A função irá dividir a lista original ao meio, de forma que
a lista original permaneça com os nós de sua primeira metade e seja criada uma outra lista para
abrigar o restante dos nós. A função deve retornar a nova lista criada.
Exemplo de chamada: L2 = L1.dividir ( );


 */
public class LDECircularSemOrdernadoComRepetidos<T extends Comparable<T>> {

    private LDENode<T> prim;
    private LDENode<T> ult;
    private int qtd;

    // métodos publicos para manipular a lista
    public boolean isEmpty() {
        return qtd == 0;
    }

    public void inserirValorInicio(T value) {
        LDENode<T> newValue = new LDENode(value);
        if (isEmpty()) {
            prim = newValue;
            ult = newValue;
            prim.setAnt(ult);
            ult.setProx(prim);
            qtd++;
        } else {
            newValue.setProx(prim);
            prim.setAnt(newValue);
            prim = newValue;
            prim.setAnt(ult);
            ult.setProx(prim);

            qtd++;
        }
    }

    public void inserirValorFinal(T value) {
        LDENode<T> newValue;
        newValue = new LDENode(value);
        if (isEmpty() == true) {
            prim = newValue;
            ult = newValue;
            prim.setAnt(ult);
            ult.setProx(prim);
            qtd++;

        } else {
            ult.setProx(newValue);
            newValue.setAnt(ult);
            ult = newValue;
            ult.setProx(prim);
            prim.setAnt(ult);
            qtd++;

        }

    }



    //ok circular
    public void removePrimeiro() {
        if (isEmpty()) {
        } else if (this.qtd == 1) {
            ult = null;
            prim = null;
            qtd--;
        } else {
            prim = prim.getProx();
            prim.setAnt(ult);
            ult.setProx(prim);
            qtd--;
        }
    }

    //ok circular
    public void removeUltimo() {
        if (isEmpty()) {
        } else {
            if (this.qtd == 1) {
                ult = null;
                prim = null;

            } else {
                ult = ult.getAnt();
                ult.setProx(prim);
                prim.setAnt(ult);

            }
            qtd--;
        }
    }

    public void exibirLista() {
        LDENode<T> aux;
        if (isEmpty() == true) {
            System.err.println("Lista vázia");
        }
        aux = this.prim;
        System.out.println("LISTA de DADOS");
        System.out.print("[ ");
        for (int i = 0; i < qtd; i++) {
            System.out.print(aux.getInfo() + " ");
            aux = aux.getProx();
        }
        System.out.println(" ]");

    }

    public void concatenar(LDECircularSemOrdernadoComRepetidos listaConcatenando) {
        LDENode<T> atual;
        int qtdLista = listaConcatenando.qtd;
        for (int i = 0; i < qtdLista; i++) {
            atual = listaConcatenando.prim;
            inserirValorFinal(atual.getInfo());
            listaConcatenando.removePrimeiro();

        }

    }

    public LDECircularSemOrdernadoComRepetidos dividir() {
        LDECircularSemOrdernadoComRepetidos restoDeLista = new LDECircularSemOrdernadoComRepetidos();
        LDENode<T> aux;
        System.out.println("qqqqqqqqq");
        exibirLista();
        int qtdOriginal = qtd;
        for (int i = 0; i < qtdOriginal; i++) {
            if (i < qtdOriginal/2) {
                aux = this.ult;
                restoDeLista.inserirValorInicio(aux.getInfo());
                removeUltimo();
            }
        }
        return restoDeLista;
    }
}
